name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'      # v1.2.3
      - 'v[0-9]+.[0-9]+.[0-9]+-*'    # v1.2.3-beta, v1.2.3-rc1
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST: "1.88.0"

jobs:
  # Cross-Compilation für alle Zielplattformen
  cross-compile:
    name: Cross Compile (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Targets
          - target: x86_64-apple-darwin
            os: macos-13
            artifact_name: diff-gitignore-filter
            asset_name: diff-gitignore-filter-darwin-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: diff-gitignore-filter
            asset_name: diff-gitignore-filter-darwin-arm64
          # Linux Targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: diff-gitignore-filter
            asset_name: diff-gitignore-filter-linux-amd64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04-arm
            artifact_name: diff-gitignore-filter
            asset_name: diff-gitignore-filter-linux-arm64
          # # Windows Targets
          # - target: x86_64-pc-windows-msvc
          #   os: windows-latest
          #   artifact_name: diff-gitignore-filter.exe
          #   asset_name: diff-gitignore-filter-windows-amd64.exe
          # - target: aarch64-pc-windows-msvc
          #   os: windows-latest
          #   artifact_name: diff-gitignore-filter.exe
          #   asset_name: diff-gitignore-filter-windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Workaround for rustup cross-device link issue
        if: "!contains(matrix.target, 'windows')"
        run: |
          export RUSTUP_HOME=/tmp/rustup
          export CARGO_HOME=/tmp/cargo
          echo "RUSTUP_HOME=/tmp/rustup" >> $GITHUB_ENV
          echo "CARGO_HOME=/tmp/cargo" >> $GITHUB_ENV
          echo "/tmp/cargo/bin" >> $GITHUB_PATH

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST }}
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: release-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            release-${{ matrix.target }}-cargo-

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --locked

      - name: Prepare binary for upload
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp ${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          else
            cp ${{ matrix.artifact_name }} ${{ matrix.asset_name }}
            strip ${{ matrix.asset_name }}
          fi

      - name: Test binary functionality
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          ./${{ matrix.artifact_name }} --version

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.asset_name }}
          retention-days: 30

  # GitHub Release erstellen
  create-release:
    name: Create GitHub Release
    needs: cross-compile
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-*
          path: release-assets/
          merge-multiple: true

      - name: Create checksums
        run: |
          cd release-assets
          for FILE in $(find -type f ! -iname "*.sha256"); do
            sha256sum $FILE > $FILE.sha256
          done
          echo "📝 Created checksums:"
          cat -n *.sha256

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          generateReleaseNotes: true
          artifacts: "release-assets/*"
          token: ${{ secrets.GITHUB_TOKEN }}
